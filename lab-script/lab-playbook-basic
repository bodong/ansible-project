#!/bin/bash
#
# Copyright 2017 Red Hat, Inc.
#
# NAME
#     lab-playbook-basic - grading script for DO407 playbook practice
#
# SYNOPSIS
#     lab-playbook-basic {setup|cleanup}
#
#        setup   - perform pre-lab setup
#        cleanup - perform post-lab cleanup (not comprehensive like reset)
#        solve   - do the lab exercise for the student (may call setup)
#        reset   - avoid resetting a machine (not preferred)
#
# DESCRIPTION
#     This script, based on singular argument, either does setup, grading,
#     cleanup, reset, or solve for the particular lab
#
# CHANGELOG
#   * Tue Oct 23 2018 Dan Kolepp <dkolepp@redhat.com>
#   - Only supporting verbs setup and cleanup for Guided Exercises.
#   * Tue Jul 11 2017 Artur Glogowski <aglogows@redhat.com>
#   - Original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
targetw='workstation'
targetc='serverc'
targetd='serverd'

target=${targetw}
labname=playbook-basic

lab_dir="/home/student/${labname}"
ansible_cfg="${lab_dir}/ansible.cfg"
ansible_inventory="${lab_dir}/inventory"
url='http://servera.lab.example.com'
playbook="${lab_dir}/site.yml"
# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup cleanup)

function lab_setup {

  target=${targetw}

  reqd_package='ansible'        # Just an example

  echo
  echo "Setting up ${target} for lab exercise work:"
  echo
  host_reachable ${targeta}

  #From labtool.do407.shlib
  #Check Ansible is installed.
  setup_check_ansible $target

  #From labtool.do407.shlib
  #Create working directory for lab artifacts.
  setup_create_lab_dir $labname

  #From labtool.do407.shlib
  #Download Ansible Inventory
  setup_download_inventory_file $labname

  #From labtool.do407.shlib
  #Download ansible.cfg
  setup_download_ansible_cfg $labname

  pad ' · Downloading index.html'
  file="files/index.html"
  _download_file ${file} ${labname}

  for server in serverc serverd; do
    # Stop firewalld on each server
    pad " · Stop firewalld on $server"
    
    cmd1='systemctl stop firewalld'
    if ${ssh} ${server} "${cmd1}" &> /dev/null
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  done


}

function lab_solve {

  echo
  echo "Solving the lab on ${target}:"
  echo

  su - student -c "${ssh} ${target} 'mv ${labdir}/site.yml ${labdir}/site.yml_ORG'"

  pad ' · Installing playbook on control node'
  cmd1="curl http://materials.example.com/grading/home/student/basic-playbook/site.yml > /home/student/basic-playbook/site.yml"
  if su - student -c "${ssh} ${target} '${cmd1}'" 
  then
    print_SUCCESS
  else
    print_FAIL
  fi


  pad ' · Executing playbook on control node'
  file="${playbook}"
  cmd1="cd ${lab_dir}; ansible-playbook ${playbook}"

  if su - student -c "${ssh} ${target} \"${cmd1}\"" 
  then
    print_SUCCESS
  else
    print_FAIL
  fi

}

# The 'grade' verb is not supported in the Ansible 2.7
# version of the course.  It is 'disabled'.
function lab_grade {

  target=${targeta}

  echo
  echo "Grading the student's work on ${target}:"
  echo
  host_reachable ${target}

  for server in serverc serverd; do
    # Put in the steps to grade the lab (use print_PASS or print_FAIL)
    pad " · Verify httpd package installation on $server"
    
    cmd1='rpm -q httpd'
    if ${ssh} ${server} "${cmd1}" &> /dev/null
    then
      print_PASS
    else
      print_FAIL
    fi
  done


  for server in serverc serverd; do
    pad " · Verify httpd service on $server"
  
    cmd1="systemctl is-enabled httpd"
    cmd2="systemctl is-active httpd"
    if ${ssh} ${server} "${cmd1} && ${cmd2}" &> /dev/null
    then
      print_PASS
    else
      print_FAIL
    fi
  done

  for webserver in serverc serverd; do
    pad " · Verify web site on $webserver"
    
    cmd1="curl ${webserver}.lab.example.com | grep '^This is a test page.'"
    if "${cmd1}" &> /dev/null
    then
      print_PASS
    else
      print_FAIL
    fi
  done

  # Overall grade
  echo
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]
  then
    print_PASS
  else
    print_FAIL
  fi

}

function lab_cleanup {

  #Just a stub; no need to
  #  re-start firewalld on serverc or serverd
  #  as playbooks in later chapters will 'fix' this
  #  if needed...

  print_line 'Cleanup'

  pad " · Remove web content"

  cmd1="rm -f /var/www/html/index.html"
  for server in serverc serverd; do
    ${ssh} ${server} ${cmd1} &> /dev/null
  done
  print_SUCCESS

  pad " · Remove httpd package"
  cmd1="yum remove -y httpd"
  for server in serverc serverd; do
  ${ssh} ${server} ${cmd1} &> /dev/null
  done
  print_SUCCESS

  

}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
