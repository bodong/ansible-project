#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     lab-troubleshoot-review - grading script for DO407 Troubleshooting Ansible Lab
#
# SYNOPSIS
#     lab-troubleshoot-lab {setup|grade|cleanup}
#
#        setup   - prepare the system for starting the lab
#        grade   - perform evaluation steps on the system
#        cleanup - perform post-lab cleanup (not comprehensive like reset)
#
# DESCRIPTION
#     This script setup verb install the ansible package 
#     on workstation and creates the working directory, 
#     grades the work, and cleans up the environment.
#
# CHANGELOG
#   * Thu Dec  6 2018 Victor Costea <vcostea@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
ssh='ssh -o StrictHostKeyChecking=no'
scp='scp -q'
target='workstation'

labname=troubleshoot-review
working_dir="/home/student/${labname}"
ansible_config_file=ansible.cfg
ansible_inventory_file=inventory-lab
ansible_inventory_file_solution=inventory-lab-fixed
ansible_playbook_file=secure-web.yml
ansible_playbook_file_solution=secure-web.yml-fixed
ansible_user=devops
ansible_target=serverb.lab.example.com
ansible_playbook_httpd_vhosts=vhosts.conf
ansible_playbook_httpd_index=index.html

# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup grade cleanup)

function lab_setup {
  reqd_package='ansible'
  telnet_package='telnet'

  print_header "Setting up ${target} for lab exercise work:"
  host_reachable ${target}

  if ! rpm -q --quiet ${reqd_package}
  then
    pad " · Installing ${reqd_package} package on ${target}"
    if yum -y install ansible; then
        print_SUCCESS
    else
        print_FAIL
    fi
  fi

  pad " · Creating the working directory"
  mkdir -p ${working_dir}
  chown -R student. ${working_dir}
  print_SUCCESS

  pad " · Removing web server packages on ${ansible_target}"
  if ${ssh} ${ansible_target} yum -y remove httpd; then
      print_SUCCESS
  else
      print_FAIL
  fi

  pad " · Downloading ${ansible_config_file}"
  if wget http://materials.example.com/labs/troubleshoot-review/${ansible_config_file} -O ${working_dir}/${ansible_config_file}; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Downloading ${ansible_inventory_file}"
  if wget http://materials.example.com/labs/troubleshoot-review/${ansible_inventory_file} -O ${working_dir}/${ansible_inventory_file}; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Downloading ${ansible_playbook_file}"
  if wget http://materials.example.com/labs/troubleshoot-review/${ansible_playbook_file} -O ${working_dir}/${ansible_playbook_file}; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Downloading ${ansible_playbook_httpd_vhosts}"
  if wget http://materials.example.com/labs/troubleshoot-review/${ansible_playbook_httpd_vhosts} -O ${working_dir}/${ansible_playbook_httpd_vhosts}; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Creating the html directory"
  mkdir -p ${working_dir}/html
  chown -R student. ${working_dir}/html
  print_SUCCESS

  pad " · Downloading ${ansible_playbook_httpd_index}"
  if wget http://materials.example.com/labs/troubleshoot-review/${ansible_playbook_httpd_index} -O ${working_dir}/html/${ansible_playbook_httpd_index}; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Changing permissions to the working directory"
  chown -R student. ${working_dir}
  print_SUCCESS

  print_line
}

function lab_grade {

  print_header "Grading the student's work on ${target}:"
  host_reachable ${target}

  pad " · Configuring HTTPS access to ${ansible_target}"
  if ${ssh} ${ansible_target} firewall-cmd --add-service https; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Checking HTTPS access to ${ansible_target}"
  if curl -ks https://${ansible_target} | grep -i "This is a test page"; then
    print_PASS
  else
    print_FAIL
  fi

  # Overall grade
  print_line
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  print_line
}

function lab_cleanup {

  print_header "Cleaning up the lab on ${target}:"
  host_reachable ${target}

  pad " · Removing vhosts.conf on ${ansible_target}"
  if ${ssh} ${ansible_target} rm -rf /etc/httpd/conf.d/vhosts.conf; then
      print_SUCCESS
    else
      print_FAIL
    fi

  pad " · Removing /var/www/vhosts/serverb-secure on ${ansible_target}"
  if ${ssh} ${ansible_target} rm -rf /var/www/vhosts/serverb-secure; then
      print_SUCCESS
    else
     	print_FAIL
    fi

  pad " · Removing web server certificate on ${ansible_target}"
  if ${ssh} ${ansible_target} rm -rf /etc/pki/tls/certs/serverb.lab.example.com.crt; then
      print_SUCCESS
    else
        print_FAIL
    fi

  pad " · Removing web server packages on ${ansible_target}"
  if ${ssh} ${ansible_target} yum -y remove httpd mod_ssl crypto-utils; then
      print_SUCCESS
    else
        print_FAIL
    fi

  print_line
}


############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
