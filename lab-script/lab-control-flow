#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     lab-control-flow - GE script for DO407
#
# SYNOPSIS
#     lab-control-flow {setup|cleanup}
#
#        setup   - prepare the system for starting the lab
#        cleanup - perform post-lab cleanup (not comprehensive like reset)
#
# DESCRIPTION
#     This script, based on singular argument, either does setup or 
#     cleanup for the lab for managing tasks flow.
#
# CHANGELOG
#   * Mon Nov  5 2018 Dan Kolepp <dkolepp@redhat.com>
#   - Script renamed from lab-task-control-controlflow
#     to lab-control-flow.
#   - Guided Exercises no longer do grade, solve, or reset.
#   * Tue May 17 2016 George Hacker <ghacker@redhat.com>
#   - lab_cleanup no longer removes the student's work
#   - lab_setup provides student with a working config and inventory
#   - changed pkg parameter for yum module to name
#   * Tue May  3 2016 George Hacker <ghacker@redhat.com>
#   - removed code that checked for local my.cnf file
#   - changed print_SUCCESS calls to print_PASS in lab_grade
#   * Wed Apr 27 2016 Razique Mahroua <rmahroua@redhat.com>
#   - updates to match the book
#   * Thu Apr 07 2016 Razique Mahroua <rmahroua@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
runuser='runuser student -c'

control_node='workstation'

# Conditional to make the script compatible with the
# demo version.
if [[ ${lab_demo_mode} == "demo" ]]; then
  env="demo"
else
  env="dev"
fi


labname=control-flow
lab_dir='/home/student/${labname}'
ansible_cfg="${lab_dir}/ansible.cfg"
ansible_inventory="${lab_dir}/inventory"
playbook="${lab_dir}/intranet.yml"
url='http://servera.lab.example.com'


ansible_cfg_file=${working_dir}/ansible.cfg
ansible_hst_file=${working_dir}/inventory
ansible_task_file=${working_dir}/configure_database.yml
ansible_playbook_file=${working_dir}/playbook.yml
ansible_db_file=http://materials.example.com/task_control
ansible_user=devops
ansible_target=servera.lab.example.com
ansible_pkgs=(mariadb-server mariadb-bench mariadb-libs mariadb-test)
ansible_users=(jdavis jsmith)

# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup cleanup)

function lab_setup {

  #From labtool.do407.shlib
  #Check Ansible is installed.
  setup_check_ansible workstation

  #From labtool.do407.shlib
  #Create working directory for lab artifacts.
  setup_create_lab_dir $labname

  #From labtool.do407.shlib
  #Download Ansible Inventory
  setup_download_inventory_file $labname

  #From labtool.do407.shlib
  #Download ansible.cfg
  setup_download_ansible_cfg $labname

  #from labtool.do407.shlib
  #create_group_vars_dir $labname

  pad ' · Downloading group_vars/all.yml file'
  _download_file group_vars/all.yml $labname

  pad ' · Downloading group_vars/database_servers.yml file'
  _download_file group_vars/database_servers.yml $labname

  pad ' · Downloading database_setup.yml file'
  _download_file database_setup.yml $labname

  pad ' · Downloading RedHat_database_tasks.yml file'
  _download_file RedHat_database_tasks.yml $labname

  pad ' · Downloading database_users_tasks.yml file'
  _download_file database_users_tasks.yml $labname

  echo
}


function lab_cleanup {

  host_reachable ${ansible_target}
  echo
  echo "Cleaning up the lab on ${ansible_target}:"
  echo

  print_line " · Removing packages"
  for i in "${ansible_pkgs[@]}"; do
    pad "   · Removing $i"
    if ${ssh} ${ansible_target} yum -y remove "$i" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  done

  print_line " · Removing users"
  for i in "${ansible_users[@]}"; do
    pad "   · Removing $i"
    ${ssh} ${ansible_target} userdel -f "$i" &>/dev/null
    retval=$?
    # 0 = success, 6 = user not found (not an error for our purposes)
    if [[ ${retval} -eq 0 || ${retval} -eq 6 ]]; then
      print_SUCCESS
    else
      print_FAIL
    fi
  done

  echo
}


############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
