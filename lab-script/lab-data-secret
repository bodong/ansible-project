#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     lab-data-secret - grading script for DO407 Ansible vault lab
#
# SYNOPSIS
#     lab-data-secret {setup|cleanup}
#
#        setup   - prepare the system for starting the lab
#        cleanup - perform post-lab cleanup (not comprehensive like reset)
#        (ONLY INCLUDE PROVIDED COMMANDS, REMOVE REST)
#
# DESCRIPTION
#     This script, based on singular argument, either does setup,
#     or cleanup for lab-data-secret.
#
# CHANGELOG
#   * Nov 5 2018 Chen Chang <cchang@redhat.com>
#   - Ansible 2.7 release update
#   * Mon Jul 3 2017 Artur Glogowski <aglogows@redhat.com>
#   - changed to run as root
#   * Fri Apr 8 2016 Snehangshu Karmakar <snehk@redhat.com>
#   - changed it to run_as_root='false'
#   * Mon Apr 4 2016 Snehangshu Karmakar <snehk@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
runuser="runuser student -c"
ssh='ssh -o StrictHostKeyChecking=no'
scp='scp -q'
target='workstation'
# Conditional to make the script compatible with the
# demo version.
if [[ ${lab_demo_mode} == "demo" ]]; then
  env="demo"
else
  env="dev"
fi

labname="data-secret"
lab_dir="/home/student"
working_dir="${lab_dir}/${labname}"
ansible_cfg_file=${working_dir}/ansible.cfg
ansible_hst_file=${working_dir}/inventory/hosts
ansible_vault_file=${working_dir}/secret.yml
ansible_user=devops
ansible_target=servera.lab.example.com
#ansible_pkgs=(httpd firewalld python-httplib2)

# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup grade cleanup solve reset)

function lab_setup {

  print_header "Setting up ${target} for lab exercise work:"
  host_reachable ${target}
  host_reachable ${ansible_target}

  setup_check_ansible workstation
  setup_create_lab_dir $labname

  pad ' Â· Downloading secret.yml file'
  _download_file secret.yml $labname

  pad " . Creating inventory directory"
  ${runuser} "mkdir ${working_dir}/inventory"
  print_SUCCESS

  pad " . Creating Ansible configuration file"
  ${runuser} "cat > ${ansible_cfg_file} << EOF
[defaults]
inventory = ${ansible_hst_file}
EOF"

  if stat ${ansible_cfg_file}; then
    print_SUCCESS
  else
    print_FAIL
  fi  

  pad " . Creating host file"
  ${runuser} "cat > ${ansible_hst_file} << EOF
[devservers]
${ansible_target}
EOF"
  if stat ${ansible_hst_file}; then
    print_SUCCESS
  else
    print_FAIL
  fi  

}

function lab_cleanup {

  print_header "Cleaning up the lab on ${target}:"
  host_reachable ${target}

  pad " . Undoing the playbook tasks"
  if ${ssh} root@${ansible_target} "id -u ansibleuser1"; then
     if [ ! -d ${working_dir} ];then
      mkdir -p ${working_dir}/inventory
    fi  
    cat > ${ansible_cfg_file} << EOF
[defaults]
inventory = ${ansible_hst_file}
EOF
    cat > ${ansible_hst_file} << EOF
[devservers]
${ansible_target}
EOF
    cat > ${ansible_cfg_file} << EOF
[defaults]
inventory = ${ansible_hst_file}
EOF
    cat > ${ansible_hst_file} << EOF
[devservers]
${ansible_target}
EOF
    cat > ${working_dir}/delete_users.yml <<EOF
---
- name: delete user accounts created by this lab
  hosts: devservers
  remote_user: devops
  become: yes
  tasks:
    - name: deleting users
      user:
        name: ansibleuser1
        state: absent
        force: yes
        remove: yes
EOF

    cd ${working_dir}
    if ansible-playbook delete_users.yml; then
       print_SUCCESS
       rm -rf delete_users.yml
    else
       print_FAIL
    fi
  else
    print_SUCCESS
  fi

  cd ..
  
  rm -rf ${working_dir}/delete_users.yml

}


############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
