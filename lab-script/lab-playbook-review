#·!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     lab-playbook-review - grading script for DO407 playbook EOC lab.
#
# SYNOPSIS
#     lab-playbook-review {setup|grade|cleanup}
#
#        grade   - perform evaluation steps on the system
#        cleanup - perform post-lab cleanup (not comprehensive like reset)
#        (ONLY INCLUDE PROVIDED COMMANDS, REMOVE REST)
#
# DESCRIPTION
#     This script, based on singular argument, either does setup, grading,
#     cleanup, reset, or solve for the particular lab of awesomeness.
#
# CHANGELOG
#   * Mon Oct 29 17:00:00 EDT 2018 Dan Kolepp <dkolepp@redhat.com>
#   - Modified to only support setup, grade, and cleanup
#   * Tue Apr 12 16:51:14 EDT 2016 Chen Chang <cchang@redhat.com>
#   - New script

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
targetw='workstation'
targeta='servera'
targetb='serverb'

labname=playbook-review

lab_dir='/home/student/${labname}'
ansible_cfg="${lab_dir}/ansible.cfg"
ansible_inventory="${lab_dir}/inventory"
playbook="${lab_dir}/internet.yml"
url='http://serverb.lab.example.com'

# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup grade cleanup)

function lab_setup {

  target=${targetw}

  #From labtool.do407.shlib
  #Check Ansible is installed.
  setup_check_ansible $target

  #From labtool.do407.shlib
  #Create working directory for lab artifacts.
  setup_create_lab_dir $labname

  #From labtool.do407.shlib
  #Download Ansible Inventory
  setup_download_inventory_file $labname

  #From labtool.do407.shlib
  #Download ansible.cfg
  setup_download_ansible_cfg $labname

  echo
}

function lab_solve {

  target=${targetw}

  lab_reset
  lab_setup

  echo
  echo "Solving the lab on ${target}:"
  echo

  pad ' · Installing playbook on control node'

  file="${playbook}"
  cmd1="curl http://materials.example.com/grading/$file > $file"

  if runuser -l student -c "${ssh} ${target} \"${cmd1}\"" &> /dev/null
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad ' · Executing playbook on control node'

  file="${playbook}"
  cmd1="cd ${lab_dir}; ansible-playbook ${playbook}"

  if runuser -l student -c "${ssh} ${target} \"${cmd1}\"" &> /dev/null
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  echo

}

function lab_grade {

  target=${targetb}

  echo
  echo "Grading the student's work on ${target}:"
  echo
  host_reachable ${target}

  # Put in the steps to grade the lab (use print_PASS or print_FAIL)
  pad ' · Verify httpd package installation'

  cmd1='rpm -q httpd'
 
  if ${ssh} ${target} "${cmd1}" &> /dev/null
  then
    print_PASS
  else
    print_FAIL
  fi


  pad ' · Verify firewalld package installation'

  cmd1='rpm -q firewalld'
 
  if ${ssh} ${target} "${cmd1}" &> /dev/null
  then
    print_PASS
  else
    print_FAIL
  fi


  pad ' · Verify mariadb-server package installation'

  cmd1='rpm -q mariadb-server'
 
  if ${ssh} ${target} "${cmd1}" &> /dev/null
  then
    print_PASS
  else
    print_FAIL
  fi


  pad ' · Verify php package installation'

  cmd1='rpm -q php'
 
  if ${ssh} ${target} "${cmd1}" &> /dev/null
  then
    print_PASS
  else
    print_FAIL
  fi


  pad ' · Verify php-mysql package installation'

  cmd1='rpm -q php-mysql'
 
  if ${ssh} ${target} "${cmd1}" &> /dev/null
  then
    print_PASS
  else
    print_FAIL
  fi


  pad ' · Verify httpd service'

  cmd1="systemctl is-enabled httpd"
  cmd2="systemctl is-active httpd"
  if ${ssh} ${target} "${cmd1} && ${cmd2}" &> /dev/null
  then
    print_PASS
  else
    print_FAIL
  fi


  pad ' · Verify firewalld service'

  cmd1="systemctl is-enabled firewalld"
  cmd2="systemctl is-active firewalld"
  if ${ssh} ${target} "${cmd1} && ${cmd2}" &> /dev/null
  then
    print_PASS
  else
    print_FAIL
  fi


  pad ' · Verify mariadb service'

  cmd1="systemctl is-enabled mariadb"
  cmd2="systemctl is-active mariadb"
  if ${ssh} ${target} "${cmd1} && ${cmd2}" &> /dev/null
  then
    print_PASS
  else
    print_FAIL
  fi


  pad ' · Verify firewalld configuration'

  cmd1="firewall-cmd --list-services | grep -w http"
  if ${ssh} ${target} "${cmd1}" &> /dev/null
  then
    print_PASS
  else
    print_FAIL
  fi


  pad ' · Verify web site'

  cmd1="curl -I http://serverb.lab.example.com | head -1 | grep '^HTTP/1.1 200 OK'"
  if ${ssh} ${targetw} "${cmd1}" &> /dev/null
  then
    print_PASS
  else
    print_FAIL
  fi

  # Overall grade
  echo
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  echo
}

function lab_cleanup {

  target=${targetb}

  echo
  echo "Cleaning up the lab on ${target}:"
  echo
  host_reachable ${target}

  print_line "Cleanup" 
  pad " · Remove firewall configuration"

  cmd1="firewall-cmd --remove-service http --permanent"
  cmd2="firewall-cmd --reload"

  ${ssh} ${target} "${cmd1} && ${cmd2}" &> /dev/null
  print_SUCCESS


  pad " · Remove web content"

  cmd1="rm -f /var/www/html/index.php"

  ${ssh} ${target} ${cmd1} &> /dev/null
  print_SUCCESS

  echo


  pad " · Remove httpd package"

  cmd1="yum remove -y httpd"

  ${ssh} ${target} ${cmd1} &> /dev/null
  print_SUCCESS

  echo


  pad " · Remove mariabdb-server package"

  cmd1="yum remove -y mariadb-server"

  ${ssh} ${target} ${cmd1} &> /dev/null
  print_SUCCESS

  echo


  pad " · Remove php package"

  cmd1="yum remove -y php"

  ${ssh} ${target} ${cmd1} &> /dev/null
  print_SUCCESS

  echo


  pad " · Remove php-mysql package"

  cmd1="yum remove -y php-mysql"

  ${ssh} ${target} ${cmd1} &> /dev/null
  print_SUCCESS

  echo
}


function lab_reset {

  target=${targetw}

  echo
  echo "Resetting the lab on ${target}:"
  echo
  host_reachable ${target}


  pad " · Remove working directory"

  cmd1="rm -rf ${lab_dir}"

  ${ssh} ${target} "${cmd1}" &> /dev/null
  print_SUCCESS


  target=${targetb}

  echo
  echo "Resetting the lab on ${target}:"
  echo
  host_reachable ${target}


  pad " · Remove firewall configuration"

  cmd1="firewall-cmd --remove-service http --permanent"
  cmd2="firewall-cmd --reload"

  ${ssh} ${target} "${cmd1} && ${cmd2}" &> /dev/null
  print_SUCCESS


  pad " · Remove web content"

  cmd1="rm -f /var/www/html/index.php"

  ${ssh} ${target} ${cmd1} &> /dev/null
  print_SUCCESS

  echo


  pad " · Remove httpd package"

  cmd1="yum remove -y httpd"

  ${ssh} ${target} ${cmd1} &> /dev/null
  print_SUCCESS

  echo


  pad " · Remove mariabdb-server package"

  cmd1="yum remove -y mariadb-server"

  ${ssh} ${target} ${cmd1} &> /dev/null
  print_SUCCESS

  echo


  pad " · Remove php package"

  cmd1="yum remove -y php"

  ${ssh} ${target} ${cmd1} &> /dev/null
  print_SUCCESS

  echo


  pad " · Remove php-mysql package"

  cmd1="yum remove -y php-mysql"

  ${ssh} ${target} ${cmd1} &> /dev/null
  print_SUCCESS

  echo
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
