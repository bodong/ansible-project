#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     lab-troubleshoot-host - grading script for DO407 RHAE 2.7 Troubleshooting Ansible Managed Hosts Guided Exercise
#
# SYNOPSIS
#     lab-troubleshoot-host {setup|cleanup}
#
#        setup   - prepare the system for starting the lab
#        cleanup - perform post-lab cleanup
#
# DESCRIPTION
#     This script installs the ansible and telnet packages 
#     in workstation and creates the GE working directory
#
# CHANGELOG
#   * Fri Dec 7 2018 Victor Costea <vcostea@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
ssh='ssh -o StrictHostKeyChecking=no'
scp='scp -q'
target='workstation'
targeta='servera'

labname='troubleshoot-host'
working_dir="/home/student/${labname}"
ansible_config_file=ansible.cfg
ansible_inventory_file=inventory
ansible_playbook_file=mailrelay.yml
ansible_j2_file=postfix-relay-main.conf.j2
ansible_user=devops
ansible_target=servera.lab.example.com

# This defines which subcommands are supported (setup, cleanup, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup cleanup)

function lab_setup {
  reqd_package='ansible'
  telnet_package='telnet'
  postfix_package='postfix'

  print_header "Setting up ${target} for lab exercise work:"
  host_reachable ${target}


  if ! rpm -q --quiet ${reqd_package}
  then
    pad " . Installing ${reqd_package} package on ${target}"
    if yum -y install ansible; then
        print_SUCCESS
    else
        print_FAIL
    fi
  fi

  if ! rpm -q --quiet ${telnet_package}
  then
    pad " . Installing ${telnet_package} package on ${target}"
    if yum -y install telnet; then
        print_SUCCESS
    else
        print_FAIL
    fi
  fi

    pad " . Checking ${postfix_package} package on ${targeta}"
    if ${ssh} ${targeta} 'rpm -q postfix' ; then
      ${ssh} ${targeta} 'rpm -e postfix' && print_SUCCESS
    else
        print_SUCCESS
    fi

  pad " . Creating the working directory"
  mkdir -p ${working_dir}
  chown -R student. ${working_dir}
  print_SUCCESS

  pad " . Downloading ${ansible_config_file}"
  if wget http://materials.example.com/labs/${labname}/${ansible_config_file} -O ${working_dir}/${ansible_config_file}; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " . Downloading ${ansible_inventory_file}"
  if wget http://materials.example.com/labs/${labname}/${ansible_inventory_file} -O ${working_dir}/${ansible_inventory_file}; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " . Downloading ${ansible_playbook_file}"
  if wget http://materials.example.com/labs/${labname}/${ansible_playbook_file} -O ${working_dir}/${ansible_playbook_file}; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " . Downloading ${ansible_j2_file}"
  if wget http://materials.example.com/labs/${labname}/${ansible_j2_file} -O ${working_dir}/${ansible_j2_file}; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " . Changing permissions to the working directory"
  chown -R student. ${working_dir}
  print_SUCCESS

  print_line
}

function lab_cleanup {

  print_header "Cleaning up the exercise on ${target}:"
  host_reachable ${target}
  pad " . Cleaning exercise"
  print_SUCCESS

  print_line

}


############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
