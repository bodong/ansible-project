#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     lab-task-control - grading script for DO407
#
# SYNOPSIS
#     lab-task-control {setup|grade|cleanup|solve|reset}
#
#        setup   - prepare the system for starting the lab
#        grade   - perform evaluation steps on the system
#        cleanup - perform post-lab cleanup (not comprehensive like reset)
#
# DESCRIPTION
#     This script, based on singular argument, either does setup, grading,
#     or cleanup for the lab for tasks.
#
# CHANGELOG
#   * Wed Jun 21 2017 Artur Glogowski <aglogows@redhat.com>
#   - changed echo to print_line and print_header in grading
#   * Tue May 24 2016 George Hacker <ghacker@redhat.com>
#   - changed working directory to lab-task-control (no underscore)
#   * Tue May 17 2016 George Hacker <ghacker@redhat.com>
#   - lab_cleanup no longer removes the student's work
#   - lab_setup provides student with a working config and inventory
#   - changed pkg parameter for yum module to name
#   * Wed May  4 2016 George Hacker <ghacker@redhat.com>
#   - changed print_SUCCESS calls to print_PASS in lab_grade
#   * Thu Apr 21 2016 Razique Mahroua <rmahroua@redhat.com>
#   - updates the script to match the SG (SELinux)
#   * Thu Apr 07 2016 Razique Mahroua <rmahroua@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
runuser='runuser student -c'

control_node='workstation'

# Conditional to make the script compatible with the
# demo version.
if [[ ${lab_demo_mode} == "demo" ]]; then
  env="demo"
else
  env="lab"
fi

labname="control-review"
working_dir="/home/student/${labname}"
ansible_cfg_file=${working_dir}/ansible.cfg
ansible_hst_file=${working_dir}/inventory
ansible_playbook_file=${working_dir}/playbook.yml
ansible_user=devops
ansible_target=serverb.lab.example.com
ansible_target_httpd=/etc/httpd/conf.d
ansible_pkgs=(httpd mod_ssl)

# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup grade cleanup solve reset)

function lab_setup {

  #From labtool.do407.shlib
  #Check Ansible is installed.
  setup_check_ansible workstation

  #From labtool.do407.shlib
  #Create working directory for lab artifacts.
  setup_create_lab_dir $labname

  #From labtool.do407.shlib
  #Download Ansible Inventory
  setup_download_inventory_file $labname

  #From labtool.do407.shlib
  #Download ansible.cfg
  setup_download_ansible_cfg $labname
  
  for f in server.key server.crt ssl.conf index.html playbook.yml vars.yml; do
  #From labtool.do407.shlib
  pad " · Downloading $f"
  _download_file $f $labname
  done 

  pad " · Setting initial firewall rules"
  remove_http_firewall

  echo
}

function lab_grade {

  host_reachable ${ansible_target}
  
  print_header "Grading the student's work on ${control_node}:"
  

  pad " · Ensuring Ansible playbook is present"
  if [[ -f ${ansible_playbook_file} ]]; then
    print_PASS
  else
    print_FAIL
  fi

  
  print_header "Grading the student's work on ${ansible_target}:"
  

  print_line " · Checking packages"
  
  for i in "${ansible_pkgs[@]}"; do
    pad "   · Checking $i"
    if ${ssh} ${ansible_target} rpm -q --quiet "$i"; then
      print_PASS
    else
      print_FAIL
    fi
  done

  print_line " · Ensuring services are started"
  daemons=(httpd firewalld)
  for i in "${daemons[@]}"; do
    pad "   · Checking $i"
    if ${ssh} ${ansible_target} systemctl is-active $i &>/dev/null; then
      print_PASS
    else
      print_FAIL
    fi
  done

  print_line " · Checking SSL configuration files"
  pad "   · Checking ssl.conf"
  if ${ssh} ${ansible_target} "[[ -f ${ansible_target_httpd}/ssl.conf ]]"; then
    print_PASS
  else
    print_FAIL
  fi
  pad "   · Checking the SSL certificate directory"
  if ${ssh} ${ansible_target} "[[ -d ${ansible_target_httpd}/ssl ]]"; then
    print_PASS
  else
    print_FAIL
  fi

  echo

  pad " · Ensuring the web server is reachable"
  if curl --silent -k https://${ansible_target} | grep -q "Configured for both HTTP and HTTPS."; then
    print_PASS
  else
    print_FAIL
  fi

  # Overall grade
  echo
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  echo
}

function remove_http_firewall() {
  cmd1="firewall-cmd --permanent --remove-service=http --remove-service=https"
  if ${ssh} ${ansible_target} "${cmd1}"; then
    if ${ssh} ${ansible_target} "firewall-cmd --reload"; then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi


}

function lab_cleanup {

  host_reachable ${ansible_target}
  echo
  echo "Cleaning up the lab on ${ansible_target}:"
  echo

  print_line " · Removing packages"
  for i in "${ansible_pkgs[@]}"; do
    pad "   · Removing $i"
    if ${ssh} ${ansible_target} yum -y remove "$i" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  done

  pad " · Removing index.html"
  if ${ssh} ${ansible_target} "rm -rf /var/www/html/index.html" &>/dev/null; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Removing custom configuration"
  cmd1="rm -Rf ${ansible_target_httpd}/{ssl.conf.bak,ssl.conf,ssl}"
  if ${ssh} ${ansible_target} "${cmd1}"; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Removing custom firewall rules"
  remove_http_firewall

  echo
}



############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
